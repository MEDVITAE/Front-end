{"ast":null,"code":"import { Api } from \"../ApiConfig\";\nimport { ApiException } from \"../ApiException\";\nconst getAll = async () => {\n  try {\n    const {\n      data\n    } = await Api().get('/swagger-ui.html');\n    return data;\n  } catch (error) {\n    return new ApiException(error.message || 'Erro ao consultar Api.');\n  }\n};\nconst getAllHistoricoAgendamento = async () => {\n  try {\n    const {\n      data\n    } = await Api().get('/');\n    if (data) {\n      return {\n        data\n      };\n    }\n    return new Error('Erro ao listar registros.');\n  } catch (error) {\n    console.error(error);\n    return new Error(error.message || 'Erro ao listar registros.');\n  }\n};\nconst getAllHoraDisponivel = async () => {\n  try {\n    const {\n      data\n    } = await Api().get('/');\n    if (data) {\n      return {\n        data\n      };\n    }\n    return new Error('Erro ao listar registros.');\n  } catch (error) {\n    console.error(error);\n    return new Error(error.message || 'Erro ao listar registros.');\n  }\n};\nconst getAllHospital = async (filter = '', token) => {\n  try {\n    const urlRelativa = `/hospital?nome_like=${filter}`;\n    const headers = {\n      'Authorization': `Bearer ${token.token}`,\n      'Content-Type': 'application/json'\n    };\n    const {\n      data\n    } = await Api().get(urlRelativa, {\n      headers\n    });\n    if (data) {\n      return {\n        data\n      };\n    }\n    return new Error('Erro ao listar registros.');\n  } catch (error) {\n    console.error(error);\n    return new Error(error.message || 'Erro ao listar registros.');\n  }\n};\nconst getById = async id => {\n  try {\n    const {\n      data\n    } = await Api().get(`/tarefas/${id}`);\n    return data;\n  } catch (error) {\n    return new ApiException(error.message || 'Erro ao consultar registro.');\n  }\n};\nconst postLogin = async dataToUpdate => {\n  try {\n    const {\n      data\n    } = await Api().post(`/auth/login`, dataToUpdate);\n    return data;\n  } catch (error) {\n    return new ApiException(error.message || 'Erro ao realizar o login.');\n  }\n};\nconst getByIdHistoricoAgendamentoAtual = async id => {\n  try {\n    const {\n      data\n    } = await Api().get('/');\n    return data;\n  } catch (error) {\n    console.error(error);\n    return new Error(error.message || 'Erro ao listar registros.');\n  }\n};\n\n//Criar outro método para inserção de dados\nconst create = async dataToCreate => {\n  try {\n    const {\n      data\n    } = await Api().post('/usuario/register', dataToCreate);\n    return data;\n  } catch (error) {\n    return new ApiException(error.message || 'Erro ao criar registro.');\n  }\n};\nconst updateById = async (id, dataToUpdate) => {\n  try {\n    const {\n      data\n    } = await Api().put(`/tarefas/${id}`, dataToUpdate);\n    return data;\n  } catch (error) {\n    return new ApiException(error.message || 'Erro ao atualizar registro.');\n  }\n};\nconst deleteById = async id => {\n  try {\n    await Api().delete(`/tarefas/${id}`);\n    return undefined;\n  } catch (error) {\n    return new ApiException(error.message || 'Erro ao apagar registro.');\n  }\n};\nconst deleteByIdAgedamento = async id => {\n  try {\n    await Api().delete(`/tarefas/${id}`);\n    return undefined;\n  } catch (error) {\n    return new ApiException(error.message || 'Erro ao apagar registro.');\n  }\n};\nexport const TarefasService = {\n  getAll,\n  getAllHospital,\n  getById,\n  postLogin,\n  getByIdHistoricoAgendamentoAtual,\n  create,\n  updateById,\n  deleteById,\n  deleteByIdAgedamento\n};","map":{"version":3,"names":["Api","ApiException","getAll","data","get","error","message","getAllHistoricoAgendamento","Error","console","getAllHoraDisponivel","getAllHospital","filter","token","urlRelativa","headers","getById","id","postLogin","dataToUpdate","post","getByIdHistoricoAgendamentoAtual","create","dataToCreate","updateById","put","deleteById","delete","undefined","deleteByIdAgedamento","TarefasService"],"sources":["/home/usuario/Documentos/Vitae/Front-end/site/src/app/shared/sevice/api/tarefas/TarefasService.ts"],"sourcesContent":["import { Api } from \"../ApiConfig\";\nimport { ApiException } from \"../ApiException\";\n\nexport interface ITarefa {\n    id: number;\n    nome: string;\n    email: string | null;\n    senha: string | null;\n    role: string;\n    cpf: string;\n}\n\nexport interface ILogin {\n    email: string;\n    senha: string;\n}\n\nexport interface ITokenId {\n    Id: string;\n    token: string;\n}\n\nexport interface IListagemHemocentro {\n    idHospital: number;\n    nome: string;\n}\n\nexport interface IListagemDeHorarioDisponivel {\n    id: number;\n    hora: number;\n    hospital?: IListagemHemocentro[];\n}\n\nexport interface IAgendamento {\n    id: number;\n    pontos: number;\n    horaMarcada: IListagemDeHorarioDisponivel;\n    hospital: IListagemHemocentro;\n}\n\ntype THoraDisponivelComTotalCount = {\n    data: IListagemHemocentro[];\n}\n\ntype THemocentroComTotalCount = {\n    data: IListagemHemocentro[];\n}\n\nexport interface IHistoricoAgendamento {\n    id: number;\n    agenda: IAgendamento;\n}\n\ntype THistoricoAgendamento = {\n    data: IHistoricoAgendamento[];\n}\n\nconst getAll = async (): Promise<ITarefa[] | ApiException> => {\n    try {\n        const { data } = await Api().get('/swagger-ui.html');\n        return data;\n    }\n    catch (error: any) {\n        return new ApiException(error.message || 'Erro ao consultar Api.');\n    }\n\n};\n\nconst getAllHistoricoAgendamento = async (): Promise<THistoricoAgendamento | Error> => {\n    try {\n\n        const { data } = await Api().get('/');\n\n        if (data) {\n            return {\n                data\n            };\n        }\n\n        return new Error('Erro ao listar registros.');\n    } catch (error) {\n        console.error(error);\n        return new Error((error as { message: string }).message || 'Erro ao listar registros.');\n    }\n};\n\nconst getAllHoraDisponivel = async (): Promise<THoraDisponivelComTotalCount | Error> => {\n    try {\n\n        const { data } = await Api().get('/');\n\n        if (data) {\n            return {\n                data\n            };\n        }\n\n        return new Error('Erro ao listar registros.');\n    } catch (error) {\n        console.error(error);\n        return new Error((error as { message: string }).message || 'Erro ao listar registros.');\n    }\n};\n\nconst getAllHospital = async (filter = '', token: ITokenId): Promise<THemocentroComTotalCount | Error> => {\n    try {\n        const urlRelativa = `/hospital?nome_like=${filter}`;\n\n        const headers = {\n            'Authorization': `Bearer ${token.token}`,\n            'Content-Type': 'application/json',\n          };\n\n        const { data } = await Api().get(urlRelativa, {headers});\n\n        if (data) {\n            return {\n                data\n            };\n        }\n\n        return new Error('Erro ao listar registros.');\n    } catch (error) {\n        console.error(error);\n        return new Error((error as { message: string }).message || 'Erro ao listar registros.');\n    }\n};\n\n\n\nconst getById = async (id: number): Promise<ITarefa | ApiException> => {\n    try {\n        const { data } = await Api().get(`/tarefas/${id}`);\n        return data;\n    }\n    catch (error: any) {\n        return new ApiException(error.message || 'Erro ao consultar registro.');\n    }\n\n};\n\nconst postLogin = async (dataToUpdate: ILogin): Promise<ITokenId | ApiException> => {\n    try {\n        const { data } = await Api().post(`/auth/login`, dataToUpdate);\n        return data;\n    }\n    catch (error: any) {\n        return new ApiException(error.message || 'Erro ao realizar o login.');\n    }\n\n};\n\n\nconst getByIdHistoricoAgendamentoAtual = async (id: number): Promise<IHistoricoAgendamento | Error> => {\n    try {\n\n        const { data } = await Api().get('/');\n\n        return data;\n    }\n    catch (error) {\n        console.error(error);\n        return new Error((error as { message: string }).message || 'Erro ao listar registros.');\n    }\n};\n\n//Criar outro método para inserção de dados\nconst create = async (dataToCreate: Omit<ITarefa, 'id'>): Promise<ITarefa | ApiException> => {\n    try {\n        const { data } = await Api().post<any>('/usuario/register', dataToCreate);\n        return data;\n    }\n    catch (error: any) {\n        return new ApiException(error.message || 'Erro ao criar registro.');\n    }\n\n};\n\nconst updateById = async (id: number, dataToUpdate: ITarefa): Promise<ITarefa | ApiException> => {\n    try {\n        const { data } = await Api().put(`/tarefas/${id}`, dataToUpdate);\n        return data;\n    }\n    catch (error: any) {\n        return new ApiException(error.message || 'Erro ao atualizar registro.');\n    }\n\n};\n\nconst deleteById = async (id: number): Promise<undefined | ApiException> => {\n    try {\n        await Api().delete(`/tarefas/${id}`);\n        return undefined;\n    }\n    catch (error: any) {\n        return new ApiException(error.message || 'Erro ao apagar registro.');\n    }\n\n};\n\nconst deleteByIdAgedamento = async (id: number): Promise<undefined | ApiException> => {\n    try {\n        await Api().delete(`/tarefas/${id}`);\n        return undefined;\n    }\n    catch (error: any) {\n        return new ApiException(error.message || 'Erro ao apagar registro.');\n    }\n\n};\n\nexport const TarefasService = {\n    getAll,\n    getAllHospital,\n    getById,\n    postLogin,\n    getByIdHistoricoAgendamentoAtual,\n    create,\n    updateById,\n    deleteById,\n    deleteByIdAgedamento,\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,cAAc;AAClC,SAASC,YAAY,QAAQ,iBAAiB;AAwD9C,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAA+C;EAC1D,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMH,GAAG,CAAC,CAAC,CAACI,GAAG,CAAC,kBAAkB,CAAC;IACpD,OAAOD,IAAI;EACf,CAAC,CACD,OAAOE,KAAU,EAAE;IACf,OAAO,IAAIJ,YAAY,CAACI,KAAK,CAACC,OAAO,IAAI,wBAAwB,CAAC;EACtE;AAEJ,CAAC;AAED,MAAMC,0BAA0B,GAAG,MAAAA,CAAA,KAAoD;EACnF,IAAI;IAEA,MAAM;MAAEJ;IAAK,CAAC,GAAG,MAAMH,GAAG,CAAC,CAAC,CAACI,GAAG,CAAC,GAAG,CAAC;IAErC,IAAID,IAAI,EAAE;MACN,OAAO;QACHA;MACJ,CAAC;IACL;IAEA,OAAO,IAAIK,KAAK,CAAC,2BAA2B,CAAC;EACjD,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZI,OAAO,CAACJ,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAIG,KAAK,CAAEH,KAAK,CAAyBC,OAAO,IAAI,2BAA2B,CAAC;EAC3F;AACJ,CAAC;AAED,MAAMI,oBAAoB,GAAG,MAAAA,CAAA,KAA2D;EACpF,IAAI;IAEA,MAAM;MAAEP;IAAK,CAAC,GAAG,MAAMH,GAAG,CAAC,CAAC,CAACI,GAAG,CAAC,GAAG,CAAC;IAErC,IAAID,IAAI,EAAE;MACN,OAAO;QACHA;MACJ,CAAC;IACL;IAEA,OAAO,IAAIK,KAAK,CAAC,2BAA2B,CAAC;EACjD,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZI,OAAO,CAACJ,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAIG,KAAK,CAAEH,KAAK,CAAyBC,OAAO,IAAI,2BAA2B,CAAC;EAC3F;AACJ,CAAC;AAED,MAAMK,cAAc,GAAG,MAAAA,CAAOC,MAAM,GAAG,EAAE,EAAEC,KAAe,KAAgD;EACtG,IAAI;IACA,MAAMC,WAAW,GAAI,uBAAsBF,MAAO,EAAC;IAEnD,MAAMG,OAAO,GAAG;MACZ,eAAe,EAAG,UAASF,KAAK,CAACA,KAAM,EAAC;MACxC,cAAc,EAAE;IAClB,CAAC;IAEH,MAAM;MAAEV;IAAK,CAAC,GAAG,MAAMH,GAAG,CAAC,CAAC,CAACI,GAAG,CAACU,WAAW,EAAE;MAACC;IAAO,CAAC,CAAC;IAExD,IAAIZ,IAAI,EAAE;MACN,OAAO;QACHA;MACJ,CAAC;IACL;IAEA,OAAO,IAAIK,KAAK,CAAC,2BAA2B,CAAC;EACjD,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZI,OAAO,CAACJ,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAIG,KAAK,CAAEH,KAAK,CAAyBC,OAAO,IAAI,2BAA2B,CAAC;EAC3F;AACJ,CAAC;AAID,MAAMU,OAAO,GAAG,MAAOC,EAAU,IAAsC;EACnE,IAAI;IACA,MAAM;MAAEd;IAAK,CAAC,GAAG,MAAMH,GAAG,CAAC,CAAC,CAACI,GAAG,CAAE,YAAWa,EAAG,EAAC,CAAC;IAClD,OAAOd,IAAI;EACf,CAAC,CACD,OAAOE,KAAU,EAAE;IACf,OAAO,IAAIJ,YAAY,CAACI,KAAK,CAACC,OAAO,IAAI,6BAA6B,CAAC;EAC3E;AAEJ,CAAC;AAED,MAAMY,SAAS,GAAG,MAAOC,YAAoB,IAAuC;EAChF,IAAI;IACA,MAAM;MAAEhB;IAAK,CAAC,GAAG,MAAMH,GAAG,CAAC,CAAC,CAACoB,IAAI,CAAE,aAAY,EAAED,YAAY,CAAC;IAC9D,OAAOhB,IAAI;EACf,CAAC,CACD,OAAOE,KAAU,EAAE;IACf,OAAO,IAAIJ,YAAY,CAACI,KAAK,CAACC,OAAO,IAAI,2BAA2B,CAAC;EACzE;AAEJ,CAAC;AAGD,MAAMe,gCAAgC,GAAG,MAAOJ,EAAU,IAA6C;EACnG,IAAI;IAEA,MAAM;MAAEd;IAAK,CAAC,GAAG,MAAMH,GAAG,CAAC,CAAC,CAACI,GAAG,CAAC,GAAG,CAAC;IAErC,OAAOD,IAAI;EACf,CAAC,CACD,OAAOE,KAAK,EAAE;IACVI,OAAO,CAACJ,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAIG,KAAK,CAAEH,KAAK,CAAyBC,OAAO,IAAI,2BAA2B,CAAC;EAC3F;AACJ,CAAC;;AAED;AACA,MAAMgB,MAAM,GAAG,MAAOC,YAAiC,IAAsC;EACzF,IAAI;IACA,MAAM;MAAEpB;IAAK,CAAC,GAAG,MAAMH,GAAG,CAAC,CAAC,CAACoB,IAAI,CAAM,mBAAmB,EAAEG,YAAY,CAAC;IACzE,OAAOpB,IAAI;EACf,CAAC,CACD,OAAOE,KAAU,EAAE;IACf,OAAO,IAAIJ,YAAY,CAACI,KAAK,CAACC,OAAO,IAAI,yBAAyB,CAAC;EACvE;AAEJ,CAAC;AAED,MAAMkB,UAAU,GAAG,MAAAA,CAAOP,EAAU,EAAEE,YAAqB,KAAsC;EAC7F,IAAI;IACA,MAAM;MAAEhB;IAAK,CAAC,GAAG,MAAMH,GAAG,CAAC,CAAC,CAACyB,GAAG,CAAE,YAAWR,EAAG,EAAC,EAAEE,YAAY,CAAC;IAChE,OAAOhB,IAAI;EACf,CAAC,CACD,OAAOE,KAAU,EAAE;IACf,OAAO,IAAIJ,YAAY,CAACI,KAAK,CAACC,OAAO,IAAI,6BAA6B,CAAC;EAC3E;AAEJ,CAAC;AAED,MAAMoB,UAAU,GAAG,MAAOT,EAAU,IAAwC;EACxE,IAAI;IACA,MAAMjB,GAAG,CAAC,CAAC,CAAC2B,MAAM,CAAE,YAAWV,EAAG,EAAC,CAAC;IACpC,OAAOW,SAAS;EACpB,CAAC,CACD,OAAOvB,KAAU,EAAE;IACf,OAAO,IAAIJ,YAAY,CAACI,KAAK,CAACC,OAAO,IAAI,0BAA0B,CAAC;EACxE;AAEJ,CAAC;AAED,MAAMuB,oBAAoB,GAAG,MAAOZ,EAAU,IAAwC;EAClF,IAAI;IACA,MAAMjB,GAAG,CAAC,CAAC,CAAC2B,MAAM,CAAE,YAAWV,EAAG,EAAC,CAAC;IACpC,OAAOW,SAAS;EACpB,CAAC,CACD,OAAOvB,KAAU,EAAE;IACf,OAAO,IAAIJ,YAAY,CAACI,KAAK,CAACC,OAAO,IAAI,0BAA0B,CAAC;EACxE;AAEJ,CAAC;AAED,OAAO,MAAMwB,cAAc,GAAG;EAC1B5B,MAAM;EACNS,cAAc;EACdK,OAAO;EACPE,SAAS;EACTG,gCAAgC;EAChCC,MAAM;EACNE,UAAU;EACVE,UAAU;EACVG;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}